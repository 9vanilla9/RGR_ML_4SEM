import streamlit as st
import pandas as pd
import pickle
import os
#import lightgbm

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Quality of Wine", layout="centered")
st.title("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–Ω–∞")

st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–æ–¥–µ–ª—è–º–∏
models_dir = "models"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∞–ø–∫–∏ models
if not os.path.exists(models_dir):
    st.error(f"–ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {models_dir}")
else:
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .pkl —Ñ–∞–π–ª–æ–≤
    model_files = [f for f in os.listdir(models_dir) if f.endswith('.pkl')]

    if not model_files:
        st.warning("–í –ø–∞–ø–∫–µ models –Ω–µ—Ç –º–æ–¥–µ–ª–µ–π (.pkl —Ñ–∞–π–ª–æ–≤)")
    else:
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", model_files)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model_path = os.path.join(models_dir, selected_model)
        with open(model_path, "rb") as f:
            model = pickle.load(f)
        st.success(f"–ú–æ–¥–µ–ª—å '{selected_model}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª")
            uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])
            if uploaded_file:
                try:
                    df_uploaded = pd.read_csv(uploaded_file)
                    st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                    st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
                    st.dataframe(df_uploaded.head())

                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ —Ñ–∞–π–ª—É
                    if 'quality' in df_uploaded.columns:
                        X = df_uploaded.drop(columns=['quality'])
                    else:
                        X = df_uploaded

                    predictions = model.predict(X)
                    df_uploaded['predicted_quality'] = predictions
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏",
                        data=df_uploaded.to_csv(index=False),
                        file_name="predictions.csv",
                        mime="text/csv"
                    )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

        with col2:
            st.subheader("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é")

            fixed_acidity_count = st.number_input("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –Ω–µ–ª–µ—Ç—É—á–∏—Ö –∫–∏—Å–ª–æ—Ç", min_value=4.8, max_value=9.6, value=7.9)
            volatile_acidity_count = st.number_input("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —É–∫—Å—É—Å–Ω–æ–π –∫–∏—Å–ª–æ—Ç—ã", min_value=0.1, max_value=0.65, value=0.6)
            citric_acid_count = st.number_input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ª–∏–º–æ–Ω–Ω–æ–π –∫–∏—Å–ª–æ—Ç—ã", min_value=0.06, max_value=0.57, value=0.06)
            residual_sugar_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∞—Ö–∞—Ä–∞, –≥/–ª", min_value=1.0, max_value=17.2, value=1.6)
            chlorides_count = st.number_input("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–ª–∏", min_value=0.01, max_value=0.8, value=0.7)
            free_sulfur_dioxide_count = st.number_input("–°–≤–æ–±–æ–¥–Ω—ã–π SO‚ÇÇ, –º–≥/–ª", min_value=2.0, max_value=77.0, value=15.0)
            total_sulfur_dioxide_count = st.number_input("–û–±—â–∏–π SO‚ÇÇ, –º–≥/–ª", min_value=6.0, max_value=251.0, value=59.0)
            density_count = st.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å", min_value=0.98, max_value=1.0, value=0.99)
            pH_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ pH", min_value=2.8, max_value=3.6, value=3.3)
            sulphates_count = st.number_input("–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è —Å–æ–ª–µ–π —Å–µ—Ä–Ω–æ–π –∫–∏—Å–ª–æ—Ç—ã", min_value=0.22, max_value=0.82, value=0.46)
            alcohol_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–∫–æ–≥–æ–ª—è", min_value=8.4, max_value=14.0, value=9.4)

            if st.button("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"):
                input_data = pd.DataFrame({
                    'fixed acidity': [fixed_acidity_count],
                    'volatile acidity': [volatile_acidity_count],
                    'citric acid': [citric_acid_count],
                    'residual sugar': [residual_sugar_count],
                    'chlorides': [chlorides_count],
                    'free_sulfur_dioxide': [free_sulfur_dioxide_count],
                    'total_sulfur_dioxide': [total_sulfur_dioxide_count],
                    'density': [density_count],
                    'pH': [pH_count],
                    'sulphates': [sulphates_count],
                    'alcohol': [alcohol_count]
                })

                prediction = model.predict(input_data)[0]
                st.success(f"‚è≥ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–Ω–∞: **{prediction} –±–∞–ª–ª–æ–≤.**")

st.markdown("---")
st.markdown("¬© 2025 ‚Äî ML Trip Predictor App")